name: Semantic Release

on:
  push:
    branches:
      - main
      - release/*

jobs:
  release:
    runs-on: ubuntu-laest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      # Step 1: Checkout the repository and fetch all history and tags
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: 'main'     # Ensure you're on the main branch
          fetch-depth: 0  # Fetch all history and tags

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Step 3: Install Semantic Release
      - name: Install Semantic Release
        run: |
          npm install --no-save \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/git \
            @semantic-release/github

      # Step 4: Run Semantic Release
      - name: Run Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Fetch the latest tags after the release
      - name: Fetch latest tags
        run: git fetch --tags

      # Step 6: Generate CHANGELOG
      - name: Generate CHANGELOG
        uses: orhun/git-cliff-action@v4.2.0
        id: git-cliff-changelog
        with:
          config: pyproject.toml
        env:
          OUTPUT: docs/CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

      # Step 7: Commit the CHANGELOG after it is generated (only if there are changes)
      - name: Commit CHANGELOG
        id: commit-changelog
        run: |
          # Set up git configuration
          git config user.name 'github-actions[bot]'
          git config user.email 'actions@github.com'

          # Write the latest version to the docs
          VERSION=$(git tag --sort=-v:refname | head -n 1 | sed 's/^v//')
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml

          # Add generated CHANGELOG and updated pyproject.toml
          git add docs/CHANGELOG.md pyproject.toml

          # Check if there are any changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit, skipping commit."
          else
            # Commit the changes
            git commit -m "chore(release): update CHANGELOG for version $VERSION [automated]"
            # Fetching and rebasing onto the latest main branch before pushing
            git fetch origin
            git rebase origin/main -X ours
            # Push changes
            git push origin main
          fi
